{{ $project := .name }}
{{ range $name, $service := .services }}
---
#! {{ $name }}-deployment.yaml
# Generated code, do not edit
apiVersion: apps/v1
{{ if eq $service.deploy.mode "global" }}
kind: DaemonSet
{{ else }}
kind: Deployment
{{ end }}
metadata:
  name: {{ $name }}
  namespace: {{ $project }}
  labels:
    com.docker.compose.project: {{ $project }}
    com.docker.compose.service: {{ $name }}
spec:
  replicas: {{ if $service.scale }} {{ $service.scale }} {{ else }} 1 {{ end }}
  selector:
    matchLabels:
      com.docker.compose.project: {{ $project }}
      com.docker.compose.service: {{$name}}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        com.docker.compose.project: {{ $project }}
        com.docker.compose.service: {{ $name }}
{{ range $name, $config := $service.networks}}
        com.docker.compose.network.{{ $name }}: "true"
{{ end }}
    spec:
{{ if $service.restart }}
      restartPolicy : {{ map $service.restart "always->Always" "on-failure->OnFailure" "no->Never"}}
{{ end }}
      containers:
        - name: {{ if $service.container_name }}{{ $service.container_name }}{{ else }}{{ $name }}{{ end }}
          image: {{ if $service.image }}{{ $service.image }}{{ else }}{{ $project }}-{{ $name }}{{ end }}
          imagePullPolicy: {{ if $service.pull_policy }}{{ $service.pull_policy | title }}{{ else }}IfNotPresent{{ end }}
{{ if $service.command }}
          command: {{ $service.command }}{{ end }}
{{ if $service.working_dir }}
          workingDir: {{ $service.working_dir }}{{ end }}
{{ if $service.environment }}
          env:
{{ range $key, $value := $service.environment }}
            - name: {{ $key }}
              value: "{{ $value }}"{{ end }}
{{ end }}

{{ if or $service.user $service.group_add $service.sysctls $service.read_only $service.privileged $service.cap_add $service.cap_drop }}
          securityContext:
{{ if $service.user }}
            runAsUser: {{ $service.user }} {{ end }}
{{ if $service.group_add }}
            supplementalGroups: {{ $service.group_add }} {{ end }}
{{ if $service.sysctls }}
            sysctls:
{{ range $name, $value := $service.sysctls }}
              name: {{ $name }}
              value: {{ $value }}
{{ end }}
{{ end }}

{{ if $service.read_only }}
            readOnlyRootFilesystem: {{ $service.read_only }} {{ end }}
{{ if $service.privileged }}
            privileged: {{ $service.privileged }} {{ end }}
{{ if or $service.cap_add $service.cap_drop }}
            capabilities:
{{ if $service.cap_add }}
              add: {{ $service.cap_add }} {{ end }}
{{ if  $service.cap_drop }}
              drop: {{ $service.cap_drop }} {{ end }}
{{ end }}
{{ end }}

{{ if or $service.cpu $service.memory }}
         resources:
           limits:
{{ if $service.cpus }}
             cpu: {{ $service.cpus }} {{ end }}
{{ if $service.memory }}
             memory: {{ $service.memory }} {{ end }}
{{ end }}

{{ if $service.healthcheck }}
          livenessProbe:
            exec:
{{ if eq "CMD-SHELL" (index $service.healthcheck.test 0)}}
              command:
                - /bin/sh
                - -c
                - {{ $service.healthcheck.test | truncate 1 | join " "}}
{{ else }}
              command: {{ $service.healthcheck.test | truncate 1 }}
{{ end }}
{{ if $service.healthcheck.interval }}
            periodSeconds: {{ $service.healthcheck.interval | seconds }}{{ end }}
{{ if $service.healthcheck.start_period }}
            initialDelaySeconds: {{ $service.healthcheck.start_period | seconds }}{{ end }}
{{ if $service.healthcheck.timeout }}
            timeoutSeconds: {{ $service.healthcheck.timeout | seconds }}{{ end }}
{{ if $service.healthcheck.retries }}
            failureThreshold: {{ $service.healthcheck.retries }}{{ end }}
{{ end }}


{{ if $service.expose }}
          ports:
    {{ range $port := $service.expose }}
            - name: {{ $name }}-{{ $port }}
              containerPort: {{ $port }}
    {{ end }}
{{ end }}

{{ if or $service.volumes $service.secrets $service.configs }}
          volumeMounts:
{{ range $volume := $service.volumes }}
            - name: {{ $volume.target | safe }}
              mountPath: {{ $volume.target }}
{{ if $volume.read_only }}
              readOnly: true{{ end }}
{{ end }}
          {{ range $secret := $service.secrets }}
            - name: {{ $secret.target | safe }}
              mountPath: {{ $secret.target }}
              subPath: {{ $secret.source }}
              readOnly: true
          {{ end }}
          {{ range $config := $service.configs }}
            - name: {{ $config.target | safe }}
              mountPath: {{ $config.target }}
              subPath: {{ $config.source }}
              readOnly: true
          {{ end }}
{{ end }}


{{ if or $service.dns $service.dns_search $service.dns_opt }}
      dnsConfig:
    {{ if $service.dns }}
        nameservers:
        {{ range $service.dns }}
            - {{ . }}
        {{ end }}
    {{ end }}
    {{ if $service.dns_search }}
        searches:
        {{ range $service.dns_search }}
            - {{ . }}
        {{ end }}
    {{ end }}
    {{ if $service.dns_opt }}
        options:
        {{ range $service.dns_opt }}
            - name: {{ . }}
        {{ end }}
    {{ end }}
{{ end }}


{{ if or $service.volumes $service.secrets $service.configs }}
      volumes:
{{ range $secret := $service.secrets }}
        - name: {{ $secret.target | safe }}
          secret:
            secretName: {{ $secret.source }}
            items:
              - key: {{ $secret.source }}
                path: {{ $secret.source }}
{{ end }}

{{ range $config := $service.configs }}
        - name: {{ $config.target | safe }}
          configMap:
            name: {{ $project }}
            items:
              - key: {{ $config.source }}
                path: {{ $config.source }}
{{ end }}

{{ range $volume := $service.volumes }}
        - name: {{ $volume.target | safe }}
{{ if eq $volume.type "volume" }}
          persistentVolumeClaim:
            claimName: {{$name}}-{{ $volume.source | safe }}
{{ else if eq $volume.type "bind" }}
          hostPath:
            path: {{ $volume.source }}
{{ else if eq $volume.type "tmpfs" }}
          emptyDir:
{{ if $volume.tmpfs.size }}
            sizeLimit: {{ $volume.tmpfs.size }}{{ end }}
{{ end }}

{{ if $volume.read_only }}
          readOnly: true{{ end }}

{{ end }}
{{ end }}
{{ end }}
